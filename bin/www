#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('weather:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


                        // var io = require('../controllers/castor.controller.js').listen(server);




                        // // // Socket IO listener
                        // var io = require('socket.io').listen(server);

                        // // var weather = require('../controllers/weather.controller.js');
                        // // var date;

                        // // Client connected event
                        // io.on('connection', function(socket)
                        // {
                        //   console.log('SOCKET / Client connected');

                        //   // setInterval(function()
                        //   // {

                        //   //   date = new Date();
                        //   //   socket.broadcast.emit('testloop','latest updated : '+ date.getHours()+':'+date.getMinutes()+':'+date.getSeconds());
                        //   //   //console.log('tell client on : '+ date.getHours()+':'+date.getMinutes()+':'+date.getSeconds());

                        //   //   weather.graph(function(error,data)
                        //   //   {
                        //   //     socket.broadcast.emit('drawcharttest',data);
                        //   //   });

                        //   // }, 60000);
                         

                        // });



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
